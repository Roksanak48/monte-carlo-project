# Instalowanie i załadowanie ggplot2
library(ggplot2)
# Tworzenie wykresu
ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy PValue w zależności od Testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top")  # Przycisk legendy na górze
View(pvalues_data)
pvalues_data$Test[pvalues_data$Test == 'LC'] == 'CVM'
pvalues_data$Test[pvalues_data$Test == 'LC']
pvalues_data$Test[pvalues_data$Test == 'LC'] = 'CVM'
View(pvalues_data)
# Tworzenie wykresu
ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top")  # Przycisk legendy na górze
pvalues_data$Generator[pvalues_data$Generator == 'python']
pvalues_data$Generator[pvalues_data$Generator == 'python'] = 'random'
# Tworzenie wykresu
ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top")  # Przycisk legendy na górze
# Tworzenie wykresu
ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") + # Przycisk legendy na górze
xlim(0,1)
# Tworzenie wykresu
ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") + # Przycisk legendy na górze
xlim(-0.1,1)
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +  # Rysowanie histogramu
facet_wrap(~ Generator, scales = "free") +  # Oddzielne wykresy dla każdego Generatora
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") + # Przycisk legendy na górze
xlim(-0.1,1)
ggsave("p_wartosc_a_test.png", plot = p_wartosi_wykres)
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +
facet_wrap(~ Generator, scales = "free", ncol = 2) +
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") +
xlim(-0.1,1)
p_wartosi_wykres
ggsave("p_wartosc_a_test.png", plot = p_wartosi_wykres)
data <- read_csv("rc4_results.csv")
# Wyświetlenie kilku pierwszych wierszy
head(data)
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 22, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
View(data)
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 10, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 15, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 17, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 121, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 21, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 30, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 5, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 10, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 17, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 20, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 27, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 7, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 25, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 30, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Analiza danych
# Na przykład, histogram wartości dla k = 10, powtórzenie 1
data %>%
filter(k == 6, repetition == 1) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram dla k = 10, repetition = 1", x = "Wartości", y = "Liczność")
# Wczytanie wszystkich plików z końcówką "_p_values.csv"
pi_p_values <- data.frame('p'=read.csv("pi_p_values.csv"), 'generator' = 'pi')
e_p_values <-  data.frame('p'=read.csv("e_p_values.csv"), 'generator' = 'e')
sqrt2_p_values <- data.frame('p'=read.csv("sqrt2_p_values.csv"), 'generator' = 'sqrt2')
p_values_data <- rbind(pi_p_values, e_p_values, sqrt2_p_values)
# Podgląd danych
head(p_values_data)
# Tworzenie histogramów za pomocą ggplot
ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
# Tworzenie histogramów za pomocą ggplot
ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów - liczb",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
##dla 5000
pi_p_values5000 <- data.frame('p'=read.csv("pi_p_values_5000.csv"), 'generator' = 'pi')
e_p_values5000 <-  data.frame('p'=read.csv("e_p_values_5000.csv"), 'generator' = 'e')
sqrt2_p_values5000 <- data.frame('p'=read.csv("sqrt2_p_values_500.csv"), 'generator' = 'sqrt2')
sqrt2_p_values5000 <- data.frame('p'=read.csv("sqrt2_p_values_5000.csv"), 'generator' = 'sqrt2')
p_values_data5000 <- rbind(pi_p_values5000, e_p_values5000, sqrt2_p_values5000)
# Tworzenie histogramów za pomocą ggplot
ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000"
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000"
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
# Tworzenie histogramów za pomocą ggplot
liczby5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000"
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
# Tworzenie histogramów za pomocą ggplot
liczby5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
ggsave('p_liczby_1000.png', plot = liczby_1000)
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
ggsave("p_liczby_5000.png", plot = liczby_5000)
##dla 10000
pi_p_values10000 <- data.frame('p'=read.csv("pi_p_values_10000.csv"), 'generator' = 'pi')
e_p_values10000 <-  data.frame('p'=read.csv("e_p_values_10000.csv"), 'generator' = 'e')
sqrt2_p_values10000 <- data.frame('p'=read.csv("sqrt2_p_values_10000.csv"), 'generator' = 'sqrt2')
p_values_data10000 <- rbind(pi_p_values10000, e_p_values10000, sqrt2_p_values10000)
# Tworzenie histogramów za pomocą ggplot
liczby_10000 <- ggplot(p_values_data10000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_10000
setwd('C:/Users/roksa/OneDrive/Pulpit/magisterka 1/semestr3/monte/monte-carlo-project')
files <- list.files(pattern = "_pvalues\\.txt$")
# Funkcja do wczytywania plików
read_pvalues <- function(file) {
data <- read.table(file, header = FALSE)
test_info <- unlist(strsplit(file, "_"))
generator <- test_info[1]
test_name <- gsub("\\.txt$", "", test_info[2])
data.frame(Generator = generator, Test = test_name, PValue = data$V1)
}
# Wczytanie danych z wszystkich plików
pvalues_data <- do.call(rbind, lapply(files, read_pvalues))
# Instalowanie i załadowanie ggplot2
library(ggplot2)
View(pvalues_data)
pvalues_data$Test[pvalues_data$Test == 'LC'] = 'CVM'
pvalues_data$Generator[pvalues_data$Generator == 'python'] = 'random'
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +
facet_wrap(~ Generator, scales = "free", ncol = 2) +
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") +
xlim(-0.1,1)
p_wartosi_wykres
p_wartosi_wykres
ggsave("p_wartosc_a_test_2.png", plot = p_wartosi_wykres)
pvalues_data$Generator[pvalues_data$Generator == 'python'] = 'MT'
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +
facet_wrap(~ Generator, scales = "free", ncol = 2) +
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") +
xlim(-0.1,1)
p_wartosi_wykres
p_wartosi_wykres
pvalues_data$Generator[pvalues_data$Generator == 'python'] = 'MT'
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +
facet_wrap(~ Generator, scales = "free", ncol = 2) +
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") +
xlim(-0.1,1)
p_wartosi_wykres
View(pvalues_data)
pvalues_data$Generator[pvalues_data$Generator == 'random'] = 'MT'
# Tworzenie wykresu
p_wartosi_wykres <- ggplot(pvalues_data, aes(x = PValue, fill = Test)) +
geom_histogram(binwidth = 0.05, position = "dodge", alpha = 0.7) +
facet_wrap(~ Generator, scales = "free", ncol = 2) +
labs(title = "Histogramy p-wartości w zależności od testu",
x = "PValue",
y = "Częstotliwość") +
theme_minimal() +
theme(legend.position = "top") +
xlim(-0.1,1)
p_wartosi_wykres
ggsave("p_wartosc_a_test_2.png", plot = p_wartosi_wykres)
##########e, pi ,sqrt
# Folder z plikami CSV
folder_path <- "."  # Zakładamy, że pliki znajdują się w bieżącym katalogu
# Wczytanie wszystkich plików z końcówką "_p_values.csv"
pi_p_values <- data.frame('p'=read.csv("pi_p_values.csv"), 'generator' = 'pi')
e_p_values <-  data.frame('p'=read.csv("e_p_values.csv"), 'generator' = 'e')
sqrt2_p_values <- data.frame('p'=read.csv("sqrt2_p_values.csv"), 'generator' = 'sqrt2')
p_values_data <- rbind(pi_p_values, e_p_values, sqrt2_p_values)
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_1000
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.05, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_1000
##dla 5000
pi_p_values5000 <- data.frame('p'=read.csv("pi_p_values_5000.csv"), 'generator' = 'pi')
e_p_values5000 <-  data.frame('p'=read.csv("e_p_values_5000.csv"), 'generator' = 'e')
sqrt2_p_values5000 <- data.frame('p'=read.csv("sqrt2_p_values_5000.csv"), 'generator' = 'sqrt2')
p_values_data5000 <- rbind(pi_p_values5000, e_p_values5000, sqrt2_p_values5000)
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_5000
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.05, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_5000
liczby_1000
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.08, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_1000
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.08, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_5000
liczby_1000
ggsave('p_liczby_1000.png', plot = liczby_1000)
ggsave("p_liczby_5000.png", plot = liczby_5000)
\begin{table}[h!]
\centering
\begin{tabular}{|c|c|}
\hline
liczba - generator & p$\_$wartość \\ \hline
\pi & 0.2622 \\ \hline
$e$ & 0.2757  \\ \hline
$\sqrt{2}$ & 0.3669 \\ \hline
\end{tabular}
\caption{Wyniki second-level testing dla trzech liczb niewymiernych.}
\end{table}
\section*{wnioski}
liczby_10000
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.04, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_5000
# Tworzenie histogramów za pomocą ggplot
liczby_1000 <- ggplot(p_values_data, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.04, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 1000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_1000
liczby_5000
liczby_1000
liczby_5000
liczby_1000
liczby_5000
liczby_1000
# Tworzenie histogramów za pomocą ggplot
liczby_5000 <- ggplot(p_values_data5000, aes(x = p_value, fill = generator)) +
geom_histogram(binwidth = 0.1, alpha = 0.7, position = "identity") +
facet_wrap(~ generator, scales = "free_y") +  # Oddzielny histogram dla każdego generatora
labs(title = "Histogramy p-wartości dla różnych generatorów liczbowych",
subtitle = "dla próbek długości 5000",
x = "p-wartość",
y = "Częstość") +
theme_minimal() +
theme(legend.position = "none")
liczby_5000
liczby_5000
ggsave("p_liczby_5000.png", plot = liczby_5000)
p_wartosi_wykres
p_wartosi_wykres
